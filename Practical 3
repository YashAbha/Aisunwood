1.Implement alpha beta search

class Node:
 def __init__(self, name, children=None, value=None):
 self.name = name
 self.children = children if children is not None else []
 self.value = value
def evaluate(node):
 return node.value
def is_terminal(node):
 return node.value is not None
def get_children(node):
 return node.children
def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
 if depth == 0 or is_terminal(node):
 return evaluate(node)
 
 if maximizing_player:
 max_eval = float('-inf')
 for child in get_children(node):
 eval = alpha_beta_pruning(child, depth-1, alpha, beta, False)
 max_eval = max(max_eval, eval)
 alpha = max(alpha, eval)
 if beta <= alpha:
 break 
 return max_eval
 else:
 min_eval = float('inf')
 for child in get_children(node):
 eval = alpha_beta_pruning(child, depth-1, alpha, beta, True)
 min_eval = min(min_eval, eval)
 beta = min(beta, eval)
 if beta <= alpha:
 break 
 return min_eval
D = Node('D', value=3)
E = Node('E', value=5)
F = Node('F', value=6)
G = Node('G', value=9)
H = Node('H', value=1)
I = Node('I', value=2)
B = Node('B', children=[D, E, F])
C = Node('C', children=[G, H, I])
A = Node('A', children=[B, C])
maximizing_player = True
initial_alpha = float('-inf')
initial_beta = float('inf')
depth = 3 
optimal_value = alpha_beta_pruning(A, depth, initial_alpha, initial_beta, maximizing_player)
print(f"The optimal value is: {optimal_value}")

2: Implement hill climbing problem.

import random
import numpy as np
coordinate = np.array([[1,2], [30,21], [56,23], [8,18], [20,50], [3,4], [11,6], [6,7], [15,20], 
[10,9], [12,12]])
 
def generate_matrix(coordinate):
 matrix = []
 for i in range(len(coordinate)):
 for j in range(len(coordinate)) : 
 p = np.linalg.norm(coordinate[i] - coordinate[j])
 matrix.append(p)
 matrix = np.reshape(matrix, (len(coordinate),len(coordinate)))
 return matrix
 
def solution(matrix):
 points = list(range(0, len(matrix)))
 solution = []
 for i in range(0, len(matrix)):
 random_point = points[random.randint(0, len(points) - 1)]
 solution.append(random_point)
 points.remove(random_point)
 return solution
 
def path_length(matrix, solution):
 cycle_length = 0
 for i in range(0, len(solution)):
 cycle_length += matrix[solution[i]][solution[i - 1]]
 return cycle_length
 
def neighbors(matrix, solution):
 neighbors = []
 for i in range(len(solution)):
 for j in range(i + 1, len(solution)):
 neighbor = solution.copy()
 neighbor[i] = solution[j]
 neighbor[j] = solution[i]
 neighbors.append(neighbor)
 
 best_neighbor = neighbors[0]
 best_path = path_length(matrix, best_neighbor)
 
 for neighbor in neighbors:
 current_path = path_length(matrix, neighbor)
 if current_path < best_path:
 best_path = current_path
 best_neighbor = neighbor
 return best_neighbor, best_path
 
 
def hill_climbing(coordinate):
 matrix = generate_matrix(coordinate)
 
 current_solution = solution(matrix)
 current_path = path_length(matrix, current_solution)
 neighbor = neighbors(matrix,current_solution)[0]




