1.Simulate 4-Queen / N-Queen problem.

N = 4

def printSolution(board):
    for i in range(N):
        for j in range(N):
            print("Q" if board[i][j] == 1 else ".", end=" ")
        print()

def isSafe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solveNQUtil(board, col):
    if col >= N:
        return True

    for i in range(N):
        if isSafe(board, i, col):
            board[i][col] = 1

            if solveNQUtil(board, col + 1):
                return True

            board[i][col] = 0

    return False

def solveNQ():
    board = [[0 for _ in range(N)] for _ in range(N)]
    if solveNQUtil(board, 0) == False:
        print("Solution does not exist")
        return False

    printSolution(board)
    return True

if __name__ == "__main__":
    solveNQ()


2.Solve tower of Hanoi problem

def TowerOfHanoi(n, from_rod, to_rod, aux_rod):
 if n == 0:
 return
 TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)
 print("Move disk", n, "from rod", from_rod, "to rod", to_rod)
 TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)
N = 4
TowerOfHanoi(N, 'A', 'C', 'B')











